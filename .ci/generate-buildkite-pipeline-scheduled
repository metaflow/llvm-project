#!/usr/bin/env bash
#===----------------------------------------------------------------------===##
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
#===----------------------------------------------------------------------===##

#
# This file generates a Buildkite pipeline that triggers the various CI jobs for
# the LLVM project on scheduled builds.
#
# See https://buildkite.com/docs/agent/v3/cli-pipeline#pipeline-format.
#

set -eu
set -o pipefail

echo "steps:"

INPUT_LLVM_ENABLE_PROJECTS="bolt;clang;clang-tools-extra;compiler-rt;flang;libc;libclc;lld;llvm;mlir;polly;pstl" \
  INPUT_BUILDKITE_QUEUE="linux-test" \
  .ci/generate-buildkite-pipeline-linux-step

INPUT_LLVM_ENABLE_PROJECTS="clang;clang-tools-extra;flang;libclc;lld;llvm;mlir;polly;pstl" \
  INPUT_BUILDKITE_QUEUE="windows-test" \
  .ci/generate-buildkite-pipeline-windows-step

cat <<EOF
# - agents:
#     queue: llvm-bazel-premerge
#   commands:
#   - set -eu
#   - cd utils/bazel
#   - bazel query //... + @llvm-project//... | xargs bazel test --config=ci
#   key: bazel
#   label: ':bazel: bazel'
#   retry:
#     automatic:
#     - exit_status: -1
#       limit: 2
#     - exit_status: 255
#       limit: 2
#   timeout_in_minutes: 120
# - trigger: "libcxx-ci"
#   build:
#     message: "${BUILDKITE_MESSAGE}"
#     commit: "${BUILDKITE_COMMIT}"
#     branch: "${BUILDKITE_BRANCH}"
# - trigger: "clang-ci"
#   build:
#     message: "${BUILDKITE_MESSAGE}"
#     commit: "${BUILDKITE_COMMIT}"
#     branch: "${BUILDKITE_BRANCH}"
EOF
